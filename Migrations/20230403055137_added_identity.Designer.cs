// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PartyProductAPI.Data;

namespace PartyProductAPI.Migrations
{
    [DbContext(typeof(InvoiceAppContext))]
    [Migration("20230403055137_added_identity")]
    partial class added_identity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PartyProductAPI.Data.AssignedPartyProduct", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("PartyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.ToView("AssignedPartyProduct");
                });

            modelBuilder.Entity("PartyProductAPI.Data.GetAllInvoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<string>("PartyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.ToView("GetAllInvoice");
                });

            modelBuilder.Entity("PartyProductAPI.Data.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InvoiceID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PartyId")
                        .HasColumnType("int")
                        .HasColumnName("PartyID");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.HasKey("InvoiceId");

                    b.HasIndex("PartyId");

                    b.HasIndex("ProductId");

                    b.ToTable("Invoice");
                });

            modelBuilder.Entity("PartyProductAPI.Data.Party", b =>
                {
                    b.Property<int>("PartyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PartyID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PartyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("PartyId");

                    b.ToTable("Party");
                });

            modelBuilder.Entity("PartyProductAPI.Data.PartyProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PartyId")
                        .HasColumnType("int")
                        .HasColumnName("PartyID");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.HasKey("Id");

                    b.HasIndex("PartyId");

                    b.HasIndex("ProductId");

                    b.ToTable("Party_Product");
                });

            modelBuilder.Entity("PartyProductAPI.Data.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal?>("Rate")
                        .HasColumnType("decimal(18,0)");

                    b.HasKey("ProductId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("PartyProductAPI.Data.ProductRate", b =>
                {
                    b.Property<int>("PrtId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PrtID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateOfRate")
                        .HasColumnType("date");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<decimal?>("Rate")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("PrtId")
                        .HasName("PK_ProductRate_PrtID");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductRate");
                });

            modelBuilder.Entity("PartyProductAPI.Data.ProductWithRate", b =>
                {
                    b.Property<DateTime?>("DateOfRate")
                        .HasColumnType("date");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("PrtId")
                        .HasColumnType("int")
                        .HasColumnName("PrtID");

                    b.Property<decimal?>("Rate")
                        .HasColumnType("decimal(10,2)");

                    b.ToView("ProductWithRate");
                });

            modelBuilder.Entity("PartyProductAPI.Data.Invoice", b =>
                {
                    b.HasOne("PartyProductAPI.Data.Party", "Party")
                        .WithMany("Invoices")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PartyProductAPI.Data.Product", "Product")
                        .WithMany("Invoices")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Party");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PartyProductAPI.Data.PartyProduct", b =>
                {
                    b.HasOne("PartyProductAPI.Data.Party", "Party")
                        .WithMany("PartyProducts")
                        .HasForeignKey("PartyId")
                        .HasConstraintName("FK_PartyProduct_Party_PartyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PartyProductAPI.Data.Product", "Product")
                        .WithMany("PartyProducts")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_PartyProduct_Product_ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Party");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PartyProductAPI.Data.ProductRate", b =>
                {
                    b.HasOne("PartyProductAPI.Data.Product", "Product")
                        .WithMany("ProductRates")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PartyProductAPI.Data.Party", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("PartyProducts");
                });

            modelBuilder.Entity("PartyProductAPI.Data.Product", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("PartyProducts");

                    b.Navigation("ProductRates");
                });
#pragma warning restore 612, 618
        }
    }
}
